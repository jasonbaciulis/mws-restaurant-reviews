let staticCache="restaurant-v2";const imagesCache="restaurant-images-v2",allCaches=[staticCache,imagesCache],urlsToCache=["/","/dist/index.html","/dist/restaurant.html","/dist/css/normalize.css","/dist/css/styles.css","/dist/js/idb.js","/dist/js/dbhelper.js","/dist/js/lazysizes.min.js","/dist/js/main.js","/dist/js/restaurant_info.js","/favicon/favicon-32x32.png"];self.addEventListener("install",function(e){e.waitUntil(caches.open(staticCache).then(function(e){return console.log("Cache opened"),e.addAll(urlsToCache)}).catch(e=>console.log(`Open cache failed: ${e}`)))}),self.addEventListener("activate",function(e){console.log("Service Worker activated"),e.waitUntil(caches.keys().then(function(e){return Promise.all(e.filter(function(e){return e.startsWith("restaurant-")&&!allCaches.includes(e)}).map(function(e){return caches.delete(e)}))}))}),self.addEventListener("fetch",e=>{new URL(e.request.url).pathname.startsWith("/img/")?e.respondWith(serveImage(e.request)):e.respondWith(caches.match(e.request).then(t=>t?(console.log(`Service worker found in cache: ${e.request.url}`),t):fetch(e.request).then(t=>{if(404!==t.status)return caches.open(staticCache).then(n=>(n.put(e.request.url,t.clone()),t))})).catch(e=>{console.log("Error:",e)}))}),serveImage=(e=>caches.open(imagesCache).then(function(t){return t.match(e.url).then(function(n){return n||fetch(e).then(function(n){return t.put(e.url,n.clone()),n})})})),self.addEventListener("message",e=>{console.log(e),"skipWaiting"===e.data.action&&self.skipWaiting()}),self.addEventListener("sync",function(e){if("myFirstSync"==e.tag){const e=indexedDB.open("restaurants",1);e.onsuccess=function(t){db=e.result;let n=db.transaction("offline-reviews","readwrite").objectStore("offline-reviews").getAll();n.onsuccess=function(){for(let e=0;e<n.result.length;e++)fetch("http://localhost:1337/reviews/",{body:JSON.stringify(n.result[e]),cache:"no-cache",credentials:"same-origin",headers:{"content-type":"application/json"},method:"POST",mode:"cors",redirect:"follow",referrer:"no-referrer"}).then(e=>e.json()).then(e=>{let t=db.transaction("all-reviews","readwrite").objectStore("all-reviews").add(e);t.onsuccess=function(e){let t=db.transaction("offline-reviews","readwrite").objectStore("offline-reviews").clear();t.onsuccess=function(){console.log("this runs but empty")},t.onerror=function(e){console.log("Unable to clear offline-reviews objectStore",e)}},t.onerror=function(e){console.log("Unable to add objectStore to IDB",e)}}).catch(e=>{console.log("Unable to make a POST fetch",e)})},n.onerror=function(e){console.log(e)}},e.onerror=function(e){console.log(e)}}});