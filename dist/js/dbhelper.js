class DBHelper{static get DATABASE_URL(){return"http://localhost:1337"}static get dbPromise(){return navigator.serviceWorker?idb.open("restaurants",1,function(e){e.createObjectStore("all-restaurants",{keyPath:"id"}),e.createObjectStore("all-reviews",{keyPath:"id"}),e.createObjectStore("offline-reviews",{keyPath:"updatedAt"})}):Promise.resolve()}static fetchRestaurants(e){DBHelper.dbPromise.then(t=>{if(!t)return;t.transaction("all-restaurants").objectStore("all-restaurants").getAll().then(r=>{0===r.length?fetch(`${DBHelper.DATABASE_URL}/restaurants`).then(e=>e.json()).then(r=>{const a=t.transaction("all-restaurants","readwrite").objectStore("all-restaurants");r.forEach(e=>{a.put(e)}),e(null,r)}).catch(t=>{e(t,null)}):e(null,r)})})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,a)=>{if(r)t(r,null);else{const r=a.find(t=>t.id==e);r?t(null,r):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,a)=>{if(r)t(r,null);else{const r=a.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,a)=>{if(r)t(r,null);else{const r=a.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((a,n)=>{if(a)r(a,null);else{let a=n;"all"!=e&&(a=a.filter(t=>t.cuisine_type==e)),"all"!=t&&(a=a.filter(e=>e.neighborhood==t)),r(null,a)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),a=t.filter((e,r)=>t.indexOf(e)==r);e(null,a)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),a=t.filter((e,r)=>t.indexOf(e)==r);e(null,a)}})}static fetchRestaurantReviews(e,t){DBHelper.dbPromise.then(r=>{if(!r)return;r.transaction("all-reviews").objectStore("all-reviews").getAll().then(r=>{r&&r.length>0?t(null,r):fetch(`${DBHelper.DATABASE_URL}/reviews/?restaurant_id=${e.id}`).then(e=>e.json()).then(e=>{this.dbPromise.then(t=>{if(!t)return;const r=t.transaction("all-reviews","readwrite").objectStore("all-reviews");e.forEach(e=>{r.put(e)})}),t(null,e)}).catch(e=>{t(e,null)})})})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph||"restaurant-placeholder"}`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static submitReview(e){return console.log(e),fetch(`${DBHelper.DATABASE_URL}/reviews`,{body:JSON.stringify(e),cache:"no-cache",credentials:"same-origin",headers:{"content-type":"application/json"},method:"POST",mode:"cors",redirect:"follow",referrer:"no-referrer"}).then(e=>{e.json().then(e=>(this.dbPromise.then(t=>{if(!t)return;t.transaction("all-reviews","readwrite").objectStore("all-reviews").put(e)}),e))}).catch(t=>{e.updatedAt=(new Date).getTime(),console.log(e),this.dbPromise.then(t=>{if(!t)return;t.transaction("offline-reviews","readwrite").objectStore("offline-reviews").put(e),console.log("Review stored offline in IDB")})})}static submitOfflineReviews(){DBHelper.dbPromise.then(e=>{if(!e)return;e.transaction("offline-reviews").objectStore("offline-reviews").getAll().then(e=>{console.log(e),e.forEach(e=>{DBHelper.submitReview(e)}),DBHelper.clearOfflineReviews()})})}static clearOfflineReviews(){DBHelper.dbPromise.then(e=>{e.transaction("offline-reviews","readwrite").objectStore("offline-reviews").clear()})}static toggleFavorite(e,t){fetch(`${DBHelper.DATABASE_URL}/restaurants/${e.id}/?is_favorite=${t}`,{method:"PUT"}).then(e=>e.json()).then(e=>(DBHelper.dbPromise.then(t=>{if(!t)return;t.transaction("all-restaurants","readwrite").objectStore("all-restaurants").put(e)}),e)).catch(r=>{e.is_favorite=t,DBHelper.dbPromise.then(t=>{if(!t)return;t.transaction("all-restaurants","readwrite").objectStore("all-restaurants").put(e)}).catch(e=>{console.log(e)})})}}